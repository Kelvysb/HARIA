// <auto-generated />
using System;
using HARIA.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HARIA.API.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ActionEventEntityActuatorEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActuatorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionsId", "ActuatorsId");

                    b.HasIndex("ActuatorsId");

                    b.ToTable("ActionEventsActuators");
                });

            modelBuilder.Entity("ActionEventEntityExternalActuatorEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExternalActuatorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionsId", "ExternalActuatorsId");

                    b.HasIndex("ExternalActuatorsId");

                    b.ToTable("ActionEventsExternalActuators");
                });

            modelBuilder.Entity("ActionEventEntityExternalSensorEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExternalSensorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionsId", "ExternalSensorsId");

                    b.HasIndex("ExternalSensorsId");

                    b.ToTable("ActionEventsExternalSensors");
                });

            modelBuilder.Entity("ActionEventEntityScenarioEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScenariosId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionsId", "ScenariosId");

                    b.HasIndex("ScenariosId");

                    b.ToTable("ScenarioActionEvents");
                });

            modelBuilder.Entity("ActionEventEntitySensorEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActionsId", "SensorsId");

                    b.HasIndex("SensorsId");

                    b.ToTable("ActionEventsSensors");
                });

            modelBuilder.Entity("ExternalSensorEntityScenarioTriggerEntity", b =>
                {
                    b.Property<int>("ExternalSensorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScenarioTriggersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExternalSensorsId", "ScenarioTriggersId");

                    b.HasIndex("ScenarioTriggersId");

                    b.ToTable("ScenarioTriggersExternalSensors");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActionEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActuatorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Invert")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StaticState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ActionEvents");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActionEventPeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionEventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FinalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InitialTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActionEventId");

                    b.ToTable("ActionEventPeriods");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActuatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmbientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeactivationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultActiveTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastStateChange")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AmbientId");

                    b.HasIndex("NodeId");

                    b.ToTable("Actuators");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.AmbientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ambients");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ExternalActuatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastExecution")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Script")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExternalActuators");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ExternalSensorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastStateChange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Script")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ExternalSensors");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.NodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SERVICE",
                            Description = "Access device service endpoints"
                        },
                        new
                        {
                            Id = 2,
                            Code = "DASHBOARD",
                            Description = "View Dashboard"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CONFIGURE",
                            Description = "Configure system"
                        },
                        new
                        {
                            Id = 4,
                            Code = "KIOSK",
                            Description = "Kiosk mode"
                        });
                });

            modelBuilder.Entity("HARIA.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "System Administrator",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Device",
                            Name = "Device"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Worker",
                            Name = "Worker"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kiosk mode",
                            Name = "Kiosk"
                        });
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ScenarioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Scenarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#F2F2F2",
                            Description = "Default scenario",
                            Icon = "default.svg",
                            IsDefault = true,
                            Name = "Default",
                            Priority = 999
                        });
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ScenarioTriggerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InitialTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioTriggers");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.SensorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveLowerBound")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveUpperBound")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmbientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastStateChange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AmbientId");

                    b.HasIndex("NodeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultValue = "DEFAULT",
                            IsSystemDefault = true,
                            Key = "ACTIVE_SCENARIO",
                            Value = "DEFAULT"
                        },
                        new
                        {
                            Id = 2,
                            DefaultValue = "AUTO",
                            IsSystemDefault = true,
                            Key = "SCENARIO_MODE",
                            Value = "AUTO"
                        });
                });

            modelBuilder.Entity("HARIA.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            PasswordHash = "21232f297a57a5a743894a0e4a801fc3"
                        },
                        new
                        {
                            Id = 2,
                            Name = "device",
                            PasswordHash = "21232f297a57a5a743894a0e4a801fc3"
                        },
                        new
                        {
                            Id = 3,
                            Name = "worker",
                            PasswordHash = "21232f297a57a5a743894a0e4a801fc3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "kiosk",
                            PasswordHash = "21232f297a57a5a743894a0e4a801fc3"
                        });
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionsId = 2,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 3,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 1,
                            RolesId = 2
                        },
                        new
                        {
                            PermissionsId = 1,
                            RolesId = 3
                        },
                        new
                        {
                            PermissionsId = 2,
                            RolesId = 4
                        },
                        new
                        {
                            PermissionsId = 4,
                            RolesId = 4
                        });
                });

            modelBuilder.Entity("ScenarioTriggerEntitySensorEntity", b =>
                {
                    b.Property<int>("ScenarioTriggersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScenarioTriggersId", "SensorsId");

                    b.HasIndex("SensorsId");

                    b.ToTable("ScenarioTriggersSensors");
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = 4
                        });
                });

            modelBuilder.Entity("ActionEventEntityActuatorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.ActuatorEntity", null)
                        .WithMany()
                        .HasForeignKey("ActuatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionEventEntityExternalActuatorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.ExternalActuatorEntity", null)
                        .WithMany()
                        .HasForeignKey("ExternalActuatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionEventEntityExternalSensorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.ExternalSensorEntity", null)
                        .WithMany()
                        .HasForeignKey("ExternalSensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionEventEntityScenarioEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.ScenarioEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionEventEntitySensorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.SensorEntity", null)
                        .WithMany()
                        .HasForeignKey("SensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExternalSensorEntityScenarioTriggerEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ExternalSensorEntity", null)
                        .WithMany()
                        .HasForeignKey("ExternalSensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.ScenarioTriggerEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenarioTriggersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActionEventPeriodEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ActionEventEntity", "ActionEvent")
                        .WithMany("ActionPeriods")
                        .HasForeignKey("ActionEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionEvent");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActuatorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.AmbientEntity", "Ambient")
                        .WithMany("Actuators")
                        .HasForeignKey("AmbientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.NodeEntity", "Node")
                        .WithMany("Actuators")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ambient");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ScenarioTriggerEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ScenarioEntity", "Scenario")
                        .WithMany("Triggers")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.SensorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.AmbientEntity", "Ambient")
                        .WithMany("Sensors")
                        .HasForeignKey("AmbientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.NodeEntity", "Node")
                        .WithMany("Sensors")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ambient");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScenarioTriggerEntitySensorEntity", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.ScenarioTriggerEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenarioTriggersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.SensorEntity", null)
                        .WithMany()
                        .HasForeignKey("SensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.HasOne("HARIA.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HARIA.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ActionEventEntity", b =>
                {
                    b.Navigation("ActionPeriods");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.AmbientEntity", b =>
                {
                    b.Navigation("Actuators");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.NodeEntity", b =>
                {
                    b.Navigation("Actuators");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("HARIA.Domain.Entities.ScenarioEntity", b =>
                {
                    b.Navigation("Triggers");
                });
#pragma warning restore 612, 618
        }
    }
}
